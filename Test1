


ᅠ = ""
ᅠᅠ = ""
ᅠᅠᅠ = ""
ᅠᅠᅠᅠ = ""

ᅟᅠᅟᅠᅠᅠᅟ = __import__("zlib")
ᅟᅠᅟᅠᅠᅠᅠᅠᅠ = __import__("base64")
ᅟᅠᅟᅠᅠᅠᅠ = bytes
ᅟᅠᅠᅠᅠᅟᅠᅠ = compile
ᅠᅠᅠᅠᅟᅠᅟᅠ = map
ᅟᅟᅟᅟᅟᅟ = range(1, 100)
ᅟᅟᅠᅠᅠᅟᅠᅠ = int
ᅟᅟᅠᅠᅠᅟᅠ = list
ᅟᅟᅠᅠᅠᅟ = lambda ᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠ, ᅠᅟᅠᅟᅠᅟ: ᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠ^ᅠᅟᅠᅟᅠᅟ

exec(ᅟᅠᅟᅠᅠᅠᅟ.decompress(ᅟᅠᅟᅠᅠᅠᅠᅠᅠ.b64decode(ᅠ + ᅠᅠ + ᅠᅠᅠ + ᅠᅠᅠᅠ)))

ᅟᅠ = []
for ᅟᅠᅟᅠ in ᅟᅟᅟᅟᅟᅟ:
    if ᅟᅠ[ᅟᅠᅟᅠᅟᅠ] ^ ᅟᅠᅟᅠ == ᅟᅠ[ᅟᅠᅟᅠᅟᅠᅟᅠ]:
        exec(ᅟᅠᅟᅠᅠᅠᅟ.decompress(ᅟᅠᅠᅠᅠᅟᅠᅠ(map(ᅟᅟᅠᅠᅠᅟ, ᅟᅠ[0:ᅟᅠᅟᅠᅟᅠ] + ᅟᅠ[ᅟᅠᅟᅠᅟᅠ + 1: ᅟᅠᅟᅠᅟᅠᅟᅠ] + ᅟᅠ[ᅟᅠᅟᅠᅟᅠᅟᅠ + 1:]))))
        break

ᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠ = []
ᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠ = ᅟᅟᅠᅠᅠᅟ([ᅟᅟᅠᅠᅠᅟᅠᅠ(ᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠ) for ᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠ in [value.split(".") for value in ᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠ] for ᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠ in ᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠ])

exec(ᅟᅠᅠᅠᅠᅟᅠᅠ(ᅟᅠᅟᅠᅠᅠᅟ.decompress(ᅟᅠᅟᅠᅠᅠᅠᅠᅠ.b64decode(ᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠ))))




ᅠ = ""
ᅠᅠ = ""
ᅠᅠᅠ = ""
ᅠᅠᅠᅠ = ""

exec(__import__("zlib").decompress(__import__("base64").b64decode(ᅠ + ᅠᅠ + ᅠᅠᅠ + ᅠᅠᅠᅠ)))
ᅟᅠ = []
for ᅟᅠᅟᅠ in range(1, 100):
    if ᅟᅠ[ᅟᅠᅟᅠᅟᅠ] ^ ᅟᅠᅟᅠ == ᅟᅠ[ᅟᅠᅟᅠᅟᅠᅟᅠ]:
        exec(__import__("zlib").decompress(bytes(map(lambda ᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠ: ᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠ^ᅟᅠᅟᅠ, ᅟᅠ[0:ᅟᅠᅟᅠᅟᅠ] + ᅟᅠ[ᅟᅠᅟᅠᅟᅠ + 1: ᅟᅠᅟᅠᅟᅠᅟᅠ] + ᅟᅠ[ᅟᅠᅟᅠᅟᅠᅟᅠ + 1:]))))
        break
ᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠ = []
ᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠ = list([int(ᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠ) for ᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠ in [value.split(".") for value in ᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠ] for ᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠ in ᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠ])
exec(compile(__import__("zlib").decompress(__import__("base64").b64decode(bytes(ᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠᅟᅠ))), "<(*3*)>", "exec"))
